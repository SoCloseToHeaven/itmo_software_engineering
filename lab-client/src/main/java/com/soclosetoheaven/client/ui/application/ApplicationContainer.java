/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.soclosetoheaven.client.ui.application;


import com.soclosetoheaven.client.locale.LocaledUI;
import com.soclosetoheaven.client.locale.Localizer;
import com.soclosetoheaven.client.ui.model.DragonTableModel;

import com.soclosetoheaven.common.model.Dragon;
import com.soclosetoheaven.common.util.Observer;
import javafx.collections.FXCollections;
import javafx.collections.MapChangeListener;
import javafx.collections.ObservableMap;

import javax.swing.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 *
 * @author Дмитрий
 */
public class ApplicationContainer extends javax.swing.JPanel implements Observer<List<Dragon>> {

    /**
     * Creates new form ApplicationContainer
     */

    public ApplicationContainer() {
        this.collection = FXCollections.observableHashMap();
        initComponents();
        registerDefaultCollectionChangeListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPanel = new javax.swing.JSplitPane();
        elementEditorPanel = new com.soclosetoheaven.client.ui.application.ElementEditorPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        elementsListPanel = new com.soclosetoheaven.client.ui.application.ElementsListPanel();
        elementsMapPanel = new com.soclosetoheaven.client.ui.application.ElementsMapPanel();

        //tabbedPane.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 13));

        elementsListPanel.getTable().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = elementsListPanel.getTable().rowAtPoint(e.getPoint());
                if (row != DragonTableModel.ROW_UNKNOWN) {
                    Integer id = (Integer) elementsListPanel.getModel().getValueAt(row, DragonTableModel.ID_INDEX);
                    elementEditorPanel.writeDragon(collection.get(id));
                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPanel, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPanel, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents



    private void setDefaultTabs() {
        final int tabCount = tabbedPane.getTabCount();
        final int firstTab = 0;
        for (int i = 0; i < tabCount; ++i) {
            tabbedPane.removeTabAt(firstTab);
        }
        splitPanel.setLeftComponent(elementEditorPanel);
        tabbedPane.addTab(Localizer.getInstance().getStringByKey(LocaledUI.TABLE.key), elementsListPanel);
        tabbedPane.addTab(Localizer.getInstance().getStringByKey(LocaledUI.MAP.key), elementsMapPanel);
        splitPanel.setRightComponent(tabbedPane);
    }

    public void setDefaultText() {
        setDefaultTabs();
        elementEditorPanel.setDefaultText();
        elementsListPanel.setDefaultText();
    }

    @Override
    public void update(List<Dragon> dragons) {
        Map<Integer, Dragon> updatedMap = dragons
                .stream()
                .collect(Collectors.toMap(Dragon::getID, Function.identity()));
        Set<Dragon> valuesCopy = new HashSet<>(collection.values());
        for (var dragon : valuesCopy) {
            Dragon newDragon = updatedMap.get(dragon.getID());
            if (newDragon == null)
                collection.remove(dragon.getID());
            else if (!dragon.equals(newDragon))
                collection.put(dragon.getID(), newDragon);

        }
        updatedMap.values().forEach((dragon) -> collection.putIfAbsent(dragon.getID(), dragon));
    }

    private void registerDefaultCollectionChangeListener() {
        collection.addListener((MapChangeListener<? super Integer, ? super Dragon>) change -> {
            DragonTableModel dragonTableModel = elementsListPanel.getModel();
            Dragon dragon;
            if (change.wasAdded() && change.wasRemoved()) {
                dragon = change.getValueAdded();
                SwingUtilities.invokeLater(() -> {
                    elementsMapPanel.updateDragon(dragon);
                    dragonTableModel.updateDragon(dragon);
                });
            }
            else if (change.wasAdded()) {
                dragon = change.getValueAdded();
                SwingUtilities.invokeLater(() -> {
                    elementsMapPanel.drawDragon(dragon, new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            elementEditorPanel.writeDragon(change.getValueAdded());
                        }
                    });
                    dragonTableModel.insertDragon(change.getValueAdded());
                });
            } else if (change.wasRemoved()) {
                dragon = change.getValueRemoved();
                SwingUtilities.invokeLater(() -> {
                    elementsMapPanel.deleteDragon(dragon);
                    dragonTableModel.deleteDragon(dragon);
                });
            }
        });
    }

    public ElementEditorPanel getElementEditorPanel() {
        return elementEditorPanel;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabbedPane;
    private com.soclosetoheaven.client.ui.application.ElementEditorPanel elementEditorPanel;
    private com.soclosetoheaven.client.ui.application.ElementsListPanel elementsListPanel;
    private com.soclosetoheaven.client.ui.application.ElementsMapPanel elementsMapPanel;
    private javax.swing.JSplitPane splitPanel;
    // End of variables declaration//GEN-END:variables

    private final ObservableMap<Integer, Dragon> collection;
}

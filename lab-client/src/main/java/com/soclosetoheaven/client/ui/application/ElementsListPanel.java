/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.soclosetoheaven.client.ui.application;

import com.soclosetoheaven.client.locale.LocaledUI;
import com.soclosetoheaven.client.locale.Localizer;
import com.soclosetoheaven.client.ui.model.DragonTableModel;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Дмитрий
 */
public class ElementsListPanel extends javax.swing.JPanel {

    /**
     * Creates new form ElementsListPanel
     */
    public ElementsListPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        dragonTable = new javax.swing.JTable();
        filterLabel = new javax.swing.JLabel();
        filterField = new javax.swing.JTextField();
        model = new DragonTableModel();

        dragonTable.setModel(model);
        dragonTable.setAutoCreateRowSorter(true);

        filterField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                model.applyFilter(filterField.getText(), (DefaultRowSorter<? extends DefaultTableModel, ? extends Integer>) dragonTable.getRowSorter());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                model.applyFilter(filterField.getText(), (DefaultRowSorter<? extends DefaultTableModel, ? extends Integer>) dragonTable.getRowSorter());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                model.applyFilter(filterField.getText(), (DefaultRowSorter<? extends DefaultTableModel, ? extends Integer>) dragonTable.getRowSorter());
            }
        });

        dragonTable.setRowSelectionAllowed(false);
        dragonTable.setColumnSelectionAllowed(false);
        dragonTable.setCellSelectionEnabled(false);

        setPreferredSize(new java.awt.Dimension(722, 543));

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);


        dragonTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        dragonTable.getTableHeader().setReorderingAllowed(false);

        scrollPane.setViewportView(dragonTable);

        //filterLabel.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N

        //filterField.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N


        setDefaultText();
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    public void setDefaultText() {
        filterLabel.setText(Localizer.getInstance().getStringByKey(LocaledUI.FILTER.key));
        model.setDefaultTable();
    }


    public DragonTableModel getModel() {
        return model;
    }

    public JTable getTable() {
        return dragonTable;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable dragonTable;
    private javax.swing.JTextField filterField;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JScrollPane scrollPane;

    // End of variables declaration//GEN-END:variables

    private DragonTableModel model;

}
